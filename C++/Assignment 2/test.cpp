//////////////////////////////////////////////////////////////////////////
// File name: test.cpp
// Author: Layton Wang
// Email Address: wangzixu.china@gmail.com
// Description: Test cases for ENGG1111 assignment #2.
//              Compile and run this program in the directory 
//              where you store all 5 of the cpp files you need to submit.
// Last Edited: 5 Nov 2014
///////////////////////////////////////////////////////////////////////////

#include <iostream>
using namespace std;



const int ASCII_LIMIT = 128;
const int NUMBER_OF_MALLS = 7;
const int MALL_NAME_LENGTH = 13;
const int NAME_SIZE =  ( MALL_NAME_LENGTH + 1 );
const int MESSAGE_LENGTH = 140;
#define NUMBER_OF_TEST_CASES 7
#define INDEX_OF_PLAIN 0
#define INDEX_OF_CODED 1


void encode_test(int,char*,int,char*);
void find_key_test(char*,int);

void decode(int key, char encoded[], int length, char plain[]);
void encode(int key, char plain[], int length, char encoded[]);
bool find_text_anywhere(char msg[], int msg_length, char text[], int text_length);
bool find_text_here(char msg[], int here, char text[], int text_length);
bool try_key(char code[], int length, char names[][NAME_SIZE], int key);

#include "encode.cpp"
#include "decode.cpp"
#include "find_text_here.cpp"
#include "try_key.cpp"
#include "find_text_anywhere.cpp"

char MALL_NAMES[NUMBER_OF_MALLS][NAME_SIZE] = {"1881 Heritage",
                                                  "Festival Walk",
                                                  "Horizon Plaza",
                                                  "Langham Place",
                                                  "Olympian City",
                                                  "Pacific Place",
                                                  "Telford Plaza"};

int main()
{



	// array of int which stores the encoding keys coresponding to test cases.
    int keys[NUMBER_OF_TEST_CASES] = {67,34,13,89,100,1,0};
    
    // 3D-array. The first index stands for caseNo.. The second index tells the type of the text,
    // 0 for plain text and 1 for coded text.
    char testcases[NUMBER_OF_TEST_CASES][2][MESSAGE_LENGTH] = {
    	{
    		{72, 105, 32, 116, 104, 101, 114, 101, 
    		33, 32, 68, 117, 101, 32, 116, 111, 32,
    		116, 104, 101, 32, 119, 101, 97, 116,
    		104, 101, 114, 32, 105, 115, 115, 117, 
    		101, 44 ,32, 111, 117, 114, 32, 110, 
    		101, 120, 116, 32, 109, 101, 101, 116,
    		105, 110, 103, 32, 119, 105, 108, 108,
    		32, 98, 101, 32, 112, 111, 115, 116,
    		112, 111, 110, 101, 100, 46, 32, 87, 
    		101, 32, 115, 104, 97, 108, 108, 32, 
    		109, 101, 101, 116, 32, 97, 116, 32, 
    		116, 104, 101, 32, 101, 110, 116, 114, 
    		97, 110, 99, 101, 32, 111, 102, 32, 49, 
    		56, 56, 49, 32, 72, 101, 114, 105, 116, 
    		97, 103, 101, 32, 110, 101, 120, 116, 32, 
    		70, 114, 105, 100, 97, 121, 44, 32, 49, 48, 
    		58, 48, 48, 97, 109, 46},  		{11, 44, 99, 55, 43, 40, 53, 40, 100, 
    		99, 7, 56, 40, 99, 55, 50, 99, 55, 43, 
    		40, 99, 58, 40, 36, 55, 43, 40, 53, 99, 
    		44, 54, 54, 56, 40, 111, 99, 50, 56, 53, 
    		99, 49, 40, 59, 55, 99, 48, 40, 40, 55, 
    		44, 49, 42, 99, 58, 44, 47, 47, 99, 37, 
    		40, 99, 51, 50, 54, 55, 51, 50, 49, 40, 
    		39, 113, 99, 26, 40, 99, 54, 43, 36, 47, 
    		47, 99, 48, 40, 40, 55, 99, 36, 55, 99, 
    		55, 43, 40, 99, 40, 49, 55, 53, 36, 49, 
    		38, 40, 99, 50, 41, 99, 116, 123, 123, 
    		116, 99, 11, 40, 53, 44, 55, 36, 42, 40, 
    		99, 49, 40, 59, 55, 99, 9, 53, 44, 39, 
    		36, 60, 111, 99, 116, 115, 125, 115, 
    		115, 36, 48, 113}
    	},
    	{
    		{72, 101, 108, 108, 111, 32, 101, 118, 
    		101, 114, 121, 111, 110, 101, 44, 32, 
    		104, 101, 114, 101, 32, 105, 115, 32, 
    		116, 104, 101, 32, 105, 110, 102, 111, 
    		114, 109, 97, 116, 105, 111, 110, 32, 
    		111, 102, 32, 111, 117, 114, 32, 110, 
    		101, 120, 116, 32, 109, 101, 101, 116, 
    		105, 110, 103, 58, 32, 86, 101, 110, 
    		117, 101, 58, 32, 98, 108, 97, 104, 45, 
    		98, 108, 97, 104, 32, 97, 116, 32, 70, 
    		101, 115, 116, 105, 118, 97, 108, 32, 
    		87, 97, 108, 107, 46, 32, 84, 105, 109, 
    		101, 58, 32, 98, 108, 97, 104, 45, 98, 
    		108, 97, 104, 45, 98, 108, 97, 104, 45, 
    		98, 108, 97, 104, 45, 98, 108, 97, 104, 
    		45, 98, 108, 97, 104, 98, 108, 97, 104, 
    		32, 50, 48, 49, 52},    		{106, 7, 14, 14, 17, 66, 7, 24, 7, 20, 
    		27, 17, 16, 7, 78, 66, 10, 7, 20, 7, 66, 
    		11, 21, 66, 22, 10, 7, 66, 11, 16, 8, 17, 
    		20, 15, 3, 22, 11, 17, 16, 66, 17, 8, 66, 
    		17, 23, 20, 66, 16, 7, 26, 22, 66, 15, 7, 
    		7, 22, 11, 16, 9, 92, 66, 120, 7, 16, 23, 
    		7, 92, 66, 4, 14, 3, 10, 79, 4, 14, 3, 10, 
    		66, 3, 22, 66, 104, 7, 21, 22, 11, 24, 3, 
    		14, 66, 121, 3, 14, 13, 80, 66, 118, 11, 
    		15, 7, 92, 66, 4, 14, 3, 10, 79, 4, 14, 3, 
    		10, 79, 4, 14, 3, 10, 79, 4, 14, 3, 10, 79, 
    		4, 14, 3, 10, 79, 4, 14, 3, 10, 4, 14, 3, 
    		10, 66, 84, 82, 83, 86}
    	},
    	{
    		{40, 79, 75, 32, 73, 39, 109, 32, 101, 110, 
    		111, 117, 103, 104, 32, 119, 105, 116, 104, 
    		32, 119, 114, 105, 116, 105, 110, 103, 32, 
    		116, 104, 101, 115, 101, 32, 116, 104, 105, 110, 
    		103, 115, 46, 46, 46, 41, 98, 108, 97, 104, 
    		45, 98, 108, 97, 104, 45, 98, 108, 97, 104, 
    		45, 98, 108, 97, 104, 45, 98, 108, 97, 104, 
    		45, 98, 108, 97, 104, 45, 98, 108, 97, 104, 
    		45, 98, 108, 97, 104, 45, 98, 108, 97, 104, 
    		45, 98, 108, 97, 104, 45, 98, 108, 97, 104, 
    		45, 98, 108, 97, 104, 45, 98, 108, 97, 104, 
    		45, 98, 108, 97, 104, 45, 98, 108, 97, 104, 
    		45, 98, 108, 97, 104, 98, 108, 97, 104, 72, 
    		111, 114, 105, 122, 111, 110, 32, 80, 108, 
    		97, 122, 97},    		{53, 92, 88, 45, 86, 52, 122, 45, 114, 123, 
    		124, 2, 116, 117, 45, 4, 118, 1, 117, 45, 4, 
    		127, 118, 1, 118, 123, 116, 45, 1, 117, 114, 
    		0, 114, 45, 1, 117, 118, 123, 116, 0, 59, 59, 
    		59, 54, 111, 121, 110, 117, 58, 111, 121, 110, 
    		117, 58, 111, 121, 110, 117, 58, 111, 121, 
    		110, 117, 58, 111, 121, 110, 117, 58, 111, 121, 
    		110, 117, 58, 111, 121, 110, 117, 58, 111, 121, 
    		110, 117, 58, 111, 121, 110, 117, 58, 111, 121, 
    		110, 117, 58, 111, 121, 110, 117, 58, 111, 121, 
    		110, 117, 58, 111, 121, 110, 117, 58, 111, 121, 
    		110, 117, 58, 111, 121, 110, 117, 58, 111, 121, 
    		110, 117, 111, 121, 110, 117, 85, 124, 127, 118, 
    		7, 124, 123, 45, 93, 121, 110, 7, 110}
    	},
    	{
    		{40, 79, 75, 32, 73, 39, 109, 32, 101, 110, 111, 
    		117, 103, 104, 32, 119, 105, 116, 104, 32, 119, 
    		114, 105, 116, 105, 110, 103, 32, 116, 104, 101, 
    		115, 101, 32, 116, 104, 105, 110, 103, 115, 46, 
    		46, 46, 41, 98, 108, 97, 104, 45, 98, 108, 97, 104, 
    		45, 98, 108, 97, 104, 45, 98, 108, 97, 104, 45, 
    		98, 108, 97, 104, 45, 98, 108, 97, 104, 45, 98, 
    		108, 97, 104, 45, 98, 108, 97, 104, 45, 98, 108, 
    		97, 104, 45, 98, 108, 97, 104, 45, 98, 108, 97, 
    		104, 45, 98, 108, 97, 104, 45, 98, 108, 97, 104, 
    		45, 98, 108, 97, 104, 45, 98, 108, 97, 104, 45, 
    		98, 108, 97, 104, 98, 108, 97, 104, 76, 97, 110, 
    		103, 104, 97, 109, 32, 80, 108, 97, 99, 101},
    		{1, 40, 36, 121, 34, 0, 70, 121, 62, 71, 72, 78, 
    		64, 65, 121, 80, 66, 77, 65, 121, 80, 75, 66, 77, 
    		66, 71, 64, 121, 77, 65, 62, 76, 62, 121, 77, 65, 
    		66, 71, 64, 76, 7, 7, 7, 2, 59, 69, 58, 65, 6, 
    		59, 69, 58, 65, 6, 59, 69, 58, 65, 6, 59, 69, 58, 
    		65, 6, 59, 69, 58, 65, 6, 59, 69, 58, 65, 6, 59, 
    		69, 58, 65, 6, 59, 69, 58, 65, 6, 59, 69, 58, 65, 
    		6, 59, 69, 58, 65, 6, 59, 69, 58, 65, 6, 59, 69, 
    		58, 65, 6, 59, 69, 58, 65, 6, 59, 69, 58, 65, 6, 
    		59, 69, 58, 65, 6, 59, 69, 58, 65, 59, 69, 58, 
    		65, 37, 58, 71, 64, 65, 58, 70, 121, 41, 69, 58, 
    		60, 62}
    	},
    	{
    		{40, 79, 75, 32, 73, 39, 109, 32, 101, 110, 111, 
    		117, 103, 104, 32, 119, 105, 116, 104, 32, 119, 
    		114, 105, 116, 105, 110, 103, 32, 116, 104, 101, 
    		115, 101, 32, 116, 104, 105, 110, 103, 115, 46, 
    		46, 46, 41, 98, 108, 97, 104, 45, 98, 108, 97, 104, 
    		45, 98, 108, 97, 104, 45, 98, 108, 97, 104, 45, 98, 
    		108, 97, 104, 45, 98, 108, 97, 104, 45, 98, 108, 
    		97, 104, 45, 98, 108, 97, 104, 45, 98, 108, 97, 104, 
    		45, 98, 108, 97, 104, 45, 98, 108, 97, 104, 45, 98, 
    		108, 97, 104, 45, 98, 108, 97, 104, 45, 98, 108, 97, 
    		104, 45, 98, 108, 97, 104, 45, 98, 108, 97, 104, 98, 
    		108, 97, 104, 79, 108, 121, 109, 112, 105, 97, 110, 
    		32, 67, 105, 116, 121},
    		{12, 51, 47, 4, 45, 11, 81, 4, 73, 82, 83, 89, 75, 76, 
    		4, 91, 77, 88, 76, 4, 91, 86, 77, 88, 77, 82, 75, 4, 
    		88, 76, 73, 87, 73, 4, 88, 76, 77, 82, 75, 87, 18, 18, 
    		18, 13, 70, 80, 69, 76, 17, 70, 80, 69, 76, 17, 70, 
    		80, 69, 76, 17, 70, 80, 69, 76, 17, 70, 80, 69, 76, 17, 
    		70, 80, 69, 76, 17, 70, 80, 69, 76, 17, 70, 80, 69, 76, 
    		17, 70, 80, 69, 76, 17, 70, 80, 69, 76, 17, 70, 80, 69, 
    		76, 17, 70, 80, 69, 76, 17, 70, 80, 69, 76, 17, 70, 80, 
    		69, 76, 17, 70, 80, 69, 76, 17, 70, 80, 69, 76, 70, 80, 
    		69, 76, 51, 80, 93, 81, 84, 77, 69, 82, 4, 39, 77, 
    		88, 93}
    	},
    	{
    		{80, 97, 99, 105, 102, 105, 99, 32, 80, 108, 97, 
    		99, 101, 40, 79, 75, 32, 73, 39, 109, 32, 101, 
    		110, 111, 117, 103, 104, 32, 119, 105, 116, 104, 
    		32, 119, 114, 105, 116, 105, 110, 103, 32, 116, 
    		104, 101, 115, 101, 32, 116, 104, 105, 110, 103, 
    		115, 46, 46, 46, 41, 98, 108, 97, 104, 45, 98, 
    		108, 97, 104, 45, 98, 108, 97, 104, 45, 98, 108, 
    		97, 104, 45, 98, 108, 97, 104, 45, 98, 108, 97, 
    		104, 45, 98, 108, 97, 104, 45, 98, 108, 97, 104, 
    		45, 98, 108, 97, 104, 45, 98, 108, 97, 104, 45, 
    		98, 108, 97, 104, 45, 98, 108, 97, 104, 45, 98, 108, 
    		97, 104, 45, 98, 108, 97, 104, 45, 98, 108, 97, 
    		104, 45, 98, 108, 97, 104, 98, 108, 97, 104},
    		{81, 98, 100, 106, 103, 106, 100, 33, 81, 109, 
    		98, 100, 102,41, 80, 76, 33, 74, 40, 110, 33, 102, 
    		111, 112, 118, 104, 105, 33, 120, 106, 117, 105, 33, 
    		120, 115, 106, 117, 106, 111, 104, 33, 117, 105, 
    		102, 116, 102, 33, 117, 105, 106, 111, 104, 116, 
    		47, 47, 47, 42, 99, 109, 98, 105, 46, 99, 109, 98, 
    		105, 46, 99, 109, 98, 105, 46, 99, 109, 98, 105, 
    		46, 99, 109, 98, 105, 46, 99, 109, 98, 105, 46, 99, 
    		109, 98, 105, 46, 99, 109, 98, 105, 46, 99, 109, 
    		98, 105, 46, 99, 109, 98, 105, 46, 99, 109, 98, 
    		105, 46, 99, 109, 98, 105, 46, 99, 109, 98, 
    		105, 46, 99, 109, 98, 105, 46, 99, 109, 98, 105, 
    		46, 99, 109, 98, 105, 99, 109, 98, 105}
    	},
    	{
    		{40, 79, 75, 32, 73, 39, 109, 32, 101, 110, 111, 
    		117, 103, 104, 32, 119, 105, 116, 104, 32, 119, 
    		114, 105, 116, 105, 110, 103, 32, 116, 104, 
    		101, 115, 101, 32, 116, 104, 105, 110, 103, 115, 
    		46, 46, 46, 41, 98, 108, 97, 104, 45, 98, 108, 
    		97, 104, 45, 98, 108, 97, 104, 45, 98, 108, 97, 
    		104, 45, 98, 108, 97, 104, 45, 98, 108, 97, 
    		104, 45, 98, 108, 97, 104, 45, 98, 108, 97, 104, 
    		45, 98, 108, 97, 104, 45, 98, 108, 97, 104, 45, 
    		98, 108, 97, 104, 45, 98, 108, 97, 104, 45, 98, 
    		108, 97, 104, 45, 98, 108, 97, 104, 45, 98, 
    		108, 97, 104, 45, 98, 108, 97, 104, 98, 108, 97, 
    		104, 84, 101, 108, 102, 111, 114, 100, 32, 80, 
    		108, 97, 122, 97},
    		{40, 79, 75, 32, 73, 39, 109, 32, 101, 110, 111, 
    		117, 103, 104, 32, 119, 105, 116, 104, 32, 119, 
    		114, 105, 116, 105, 110, 103, 32, 116, 104, 101, 
    		115, 101, 32, 116, 104, 105, 110, 103, 115, 46, 
    		46, 46, 41, 98, 108, 97, 104, 45, 98, 108, 97, 104, 
    		45, 98, 108, 97, 104, 45, 98, 108, 97, 104, 45, 98, 
    		108, 97, 104, 45, 98, 108, 97, 104, 45, 98, 108, 
    		97, 104, 45, 98, 108, 97, 104, 45, 98, 108, 97, 104, 
    		45, 98, 108, 97, 104, 45, 98, 108, 97, 104, 45, 98, 
    		108, 97, 104, 45, 98, 108, 97, 104, 45, 98, 108, 
    		97, 104, 45, 98, 108, 97, 104, 45, 98, 108, 97, 
    		104, 98, 108, 97, 104, 84, 101, 108, 102, 111, 
    		114, 100, 32, 80, 108, 97, 122, 97}
    	}
    };
    
    cout << "Test encoding:" << endl;
    for( int i = 0; i < NUMBER_OF_TEST_CASES; ++i )
    	encode_test(keys[i],testcases[i][INDEX_OF_PLAIN],MESSAGE_LENGTH,testcases[i][INDEX_OF_CODED]);
    
    cout << endl;
    cout << "Test finding keys:" << endl;
    
    for( int i = 0; i < NUMBER_OF_TEST_CASES; ++i ){
    	find_key_test(testcases[i][INDEX_OF_CODED],keys[i]);
    	cout << endl;
    }
    	
	return 0;
}

void find_key_test( char* coded_message, int anskey )
{
   for (int key = 0; key < ASCII_LIMIT; ++key)
   {
      if (try_key(coded_message, MESSAGE_LENGTH, MALL_NAMES, key) && key == anskey )
      {
         cout << "Code broken with key: " << key << endl;

         char decoded_message[MESSAGE_LENGTH];
         decode(key, coded_message, MESSAGE_LENGTH, decoded_message);

         cout << "\nDecoded message is:" << endl;
         for (int i = 0; i < MESSAGE_LENGTH; ++i)
            cout << decoded_message[i];
         cout << endl;

         return ;
      }
   }
   cout << "Failed to decode" << endl;
}

void encode_test( int key, char plain[], int length, char encoded[] )
{
	char testEncode[MESSAGE_LENGTH];
	encode( key, plain, MESSAGE_LENGTH, testEncode );
	for( int i = 0; i < MESSAGE_LENGTH; ++i )
		if( testEncode[i] != encoded[i] )
		{
			cout << "encode() failed!";
            cout << i;
			break;
		}
	cout << "encode() succeeded!" << endl;
}

