
==================== FINAL INTERFACE ====================
2016-09-29 04:58:43.393762 UTC

interface tutor_GLltxzxYifw5EdUanoMNpW:Declare 7103
  interface hash: 4b81adfa69beae229bc5bde70dedcb5f
  ABI hash: 9a58678d97fbc4b12602f590ffa3cf3a
  export-list hash: 582075eb9e752d9bf992b69884b4667e
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 962af636f8e927040c7daa9c21457292
  sig of: Nothing
  used TH splices: False
  where
exports:
  Declare.e1
  Declare.e2
  Declare.e3
  Declare.e4
  Declare.rename
  Declare.showExpr
  Declare.Exp{Declare.Add Declare.Decl Declare.Div Declare.Mult Declare.Num Declare.Sub Declare.Var}
module dependencies:
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
f7493b36bbd807ba229e9b83dfe65982
  $fShowExp :: GHC.Show.Show Declare.Exp
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Declare.Exp
                  Declare.$fShowExp_$cshowsPrec
                  Declare.showExpr
                  Declare.$fShowExp_$cshowList -}
f7493b36bbd807ba229e9b83dfe65982
  $fShowExp1 :: Declare.Exp -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ x :: Declare.Exp s :: GHC.Base.String[OneShot] ->
                 GHC.Base.++ @ GHC.Types.Char (Declare.showExpr x) s) -}
f7493b36bbd807ba229e9b83dfe65982
  $fShowExp_$cshowList :: [Declare.Exp] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ ls :: [Declare.Exp] s :: GHC.Base.String ->
                 GHC.Show.showList__ @ Declare.Exp Declare.$fShowExp1 ls s) -}
f7493b36bbd807ba229e9b83dfe65982
  $fShowExp_$cshowsPrec ::
    GHC.Types.Int -> Declare.Exp -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int x :: Declare.Exp s :: GHC.Base.String ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n (Declare.showExpr x))
                   s) -}
f7493b36bbd807ba229e9b83dfe65982
  data Exp
    = Num GHC.Types.Int
    | Add Declare.Exp Declare.Exp
    | Sub Declare.Exp Declare.Exp
    | Mult Declare.Exp Declare.Exp
    | Div Declare.Exp Declare.Exp
    | Var GHC.Base.String
    | Decl GHC.Base.String Declare.Exp Declare.Exp
76cf80cbc390ed116ccf80e015ba20e1
  e1 :: Declare.Exp
  {- Strictness: m7,
     Unfolding: (Declare.Decl Declare.e11 Declare.e8 Declare.e7) -}
3d1364f3f6606d8c43dcac4d0b1c02ea
  e10 :: Declare.Exp
  {- Strictness: m6, Unfolding: (Declare.Var Declare.e11) -}
80af107118d3773165ac70562f8e54da
  e11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "x"#) -}
1d7bbf692af387ac427f449b69c1f9be
  e12 :: Declare.Exp
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Declare.Add Declare.e8 Declare.e13) -}
76e3262bcf0ee2eec624e821818b6da3
  e13 :: Declare.Exp
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Declare.Num Declare.e14) -}
f3dd50da87c36fe00b97455270752981
  e14 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4) -}
c40ef75819c8a495c640621a0352d067
  e15 :: Declare.Exp
  {- HasNoCafRefs, Strictness: m4,
     Unfolding: (Declare.Mult Declare.e13 Declare.e16) -}
274e1d07284629f5211789e48bbcefad
  e16 :: Declare.Exp
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Declare.Num Declare.e17) -}
064b61f7dd8e7a015af7fe99e0a384dc
  e17 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 5) -}
7c318dcd75c7581613eba7b23cf57d2b
  e18 :: Declare.Exp
  {- Strictness: m5,
     Unfolding: (Declare.Div Declare.e10 Declare.e19) -}
34f4ad0ac0b4271d8cd5c22c6c640e7f
  e19 :: Declare.Exp
  {- Strictness: m6, Unfolding: (Declare.Var Declare.e20) -}
593d18349baa38891120d1a9d09863c7
  e2 :: Declare.Exp
  {- Strictness: m7,
     Unfolding: (Declare.Decl Declare.e11 Declare.e12 Declare.e10) -}
7ec11d222d0f1fb30f458e9752aaeebb
  e20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "y"#) -}
24133af60790fcb43ec02c59c9d51ad9
  e3 :: Declare.Exp
  {- Strictness: m2,
     Unfolding: (Declare.Add Declare.e10 Declare.e15) -}
4c4262285b5349499e742d7aebea1190
  e4 :: Declare.Exp
  {- Strictness: m7,
     Unfolding: (Declare.Decl Declare.e20 Declare.e3 Declare.e18) -}
a1eb28644a7085e1919d5864c5a81a70
  e7 :: Declare.Exp
  {- Strictness: m4,
     Unfolding: (Declare.Mult Declare.e10 Declare.e8) -}
7ebd94617cd032c8679524e3ca69f45b
  e8 :: Declare.Exp
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Declare.Num Declare.e9) -}
4abee55b8c4c5e51fc622182857595df
  e9 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3) -}
b324933f55a5cfbfc68f5f3e0cee44be
  rename ::
    GHC.Base.String -> GHC.Base.String -> Declare.Exp -> Declare.Exp
  {- Strictness: b -}
f7493b36bbd807ba229e9b83dfe65982
  showExpr :: Declare.Exp -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
instance GHC.Show.Show [Declare.Exp] = Declare.$fShowExp
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

