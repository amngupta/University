
==================== FINAL INTERFACE ====================
2016-09-19 05:19:03.501057 UTC

interface tutor_I0JxLUPgaQCBFIX5GfZik4:Declare 7103
  interface hash: 2a6371714a5abbb8e8ec5b604f685ffb
  ABI hash: 8c87055b55218bfd55c5cf1fb76568c6
  export-list hash: 83e0aba052a31fe1618c43675cfe4234
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 962af636f8e927040c7daa9c21457292
  sig of: Nothing
  used TH splices: False
  where
exports:
  Declare.e1
  Declare.e2
  Declare.e3
  Declare.e4
  Declare.showExpr
  Declare.Exp{Declare.Add Declare.Div Declare.Log Declare.Mult Declare.Num Declare.Sqrt Declare.Sub}
module dependencies:
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
14dff50cf252e55f8b3837e78165cde0
  $fShowExp :: GHC.Show.Show Declare.Exp
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Declare.Exp
                  Declare.$fShowExp_$cshowsPrec
                  Declare.showExpr
                  Declare.$fShowExp_$cshowList -}
14dff50cf252e55f8b3837e78165cde0
  $fShowExp1 :: Declare.Exp -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ x :: Declare.Exp s :: GHC.Base.String[OneShot] ->
                 GHC.Base.++ @ GHC.Types.Char (Declare.showExpr x) s) -}
14dff50cf252e55f8b3837e78165cde0
  $fShowExp_$cshowList :: [Declare.Exp] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ ls :: [Declare.Exp] s :: GHC.Base.String ->
                 GHC.Show.showList__ @ Declare.Exp Declare.$fShowExp1 ls s) -}
14dff50cf252e55f8b3837e78165cde0
  $fShowExp_$cshowsPrec ::
    GHC.Types.Int -> Declare.Exp -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int x :: Declare.Exp s :: GHC.Base.String ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n (Declare.showExpr x))
                   s) -}
14dff50cf252e55f8b3837e78165cde0
  data Exp
    = Num GHC.Types.Double
    | Add Declare.Exp Declare.Exp
    | Sub Declare.Exp Declare.Exp
    | Mult Declare.Exp Declare.Exp
    | Div Declare.Exp Declare.Exp
    | Sqrt Declare.Exp
    | Log Declare.Exp
ddfe522db13b293b82d475a87a10b740
  e1 :: Declare.Exp
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Declare.Add Declare.e9 Declare.e7) -}
e811f44f541af62384b69ef28e4f0672
  e10 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 3.1) -}
7ff29c1cfd72226d2bd9409b238d3416
  e11 :: Declare.Exp
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Declare.Num Declare.e12) -}
50f90a16f6ce4dfd438c98b15162afb7
  e12 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 3.4) -}
e1659959b259bfee5fe81f467f2367e0
  e13 :: Declare.Exp
  {- HasNoCafRefs, Strictness: m4,
     Unfolding: (Declare.Mult Declare.e16 Declare.e14) -}
217b9d1416d48bb5d3b879a5ebf59382
  e14 :: Declare.Exp
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Declare.Num Declare.e15) -}
23e58cc6e11fa1a684e8a57b1c8bcdd4
  e15 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 9.2) -}
8d0986d158374efe91a9a2684f545437
  e16 :: Declare.Exp
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Declare.Add Declare.e19 Declare.e17) -}
12cdee9cf63fd425e4478f88e697e393
  e17 :: Declare.Exp
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Declare.Num Declare.e18) -}
85e8950fb0d5da1b50f095a50129a202
  e18 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 2.0) -}
c0297c3be308c871f7a14ba290c4d3f7
  e19 :: Declare.Exp
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Declare.Num Declare.e20) -}
0b7159383389855cf61daffea964cd4d
  e2 :: Declare.Exp
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Declare.Sub Declare.e13 Declare.e11) -}
ec68f0ddfa9e74dd36c79eb11566bec3
  e20 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 8.8) -}
a7fe33b62a43e67e559278fdda12c817
  e21 :: Declare.Exp
  {- HasNoCafRefs, Strictness: m4,
     Unfolding: (Declare.Mult Declare.e24 Declare.e22) -}
cb592ae555eb60e9ed46d537e057c938
  e22 :: Declare.Exp
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Declare.Num Declare.e23) -}
ba6d7b933e2203ee94e4a1b947809b57
  e23 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 7.1) -}
81df4f2a9f0cb6dbc0d68880fc65ad16
  e24 :: Declare.Exp
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Declare.Sub Declare.e27 Declare.e25) -}
0a2ec0cdc47351c72f8d30aa3d3b6126
  e25 :: Declare.Exp
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Declare.Num Declare.e26) -}
b1b2d134ccca9c74597f23cc1cdfd08d
  e26 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 6.2) -}
d482ccae0d047b5ac1f4ced6587fab8d
  e27 :: Declare.Exp
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Declare.Num Declare.e28) -}
50910bd36b96db591c503fc5dff13ad9
  e28 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 5.3) -}
9aad9e6ba8ddb421557c5cc640c95a65
  e29 :: Declare.Exp
  {- HasNoCafRefs, Strictness: m5,
     Unfolding: (Declare.Div Declare.e32 Declare.e30) -}
ce35170c2a2420ccd1d1d1920aa4a7fe
  e3 :: Declare.Exp
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Declare.Sub Declare.e29 Declare.e21) -}
fd60d2ca448c5e743389958ccac51601
  e30 :: Declare.Exp
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Declare.Num Declare.e31) -}
6e2ed78b4bd70ef63af3a0d57ca817e2
  e31 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 3.5) -}
7884fa44c5e88bb2aba002e572cacf2a
  e32 :: Declare.Exp
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Declare.Add Declare.e35 Declare.e33) -}
4039fc1e4649bf6d7a869d0c394b72dc
  e33 :: Declare.Exp
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Declare.Num Declare.e34) -}
77519b600659a41322baccde59447b1e
  e34 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 2.6) -}
7675af4c6b6288c12e189dc7ddfe67be
  e35 :: Declare.Exp
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Declare.Num Declare.e36) -}
8a49150c865b0cda57ffdaa09dfb2dd5
  e36 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 1.7) -}
f1beb947f75abfa78dc677a96073b69b
  e37 :: Declare.Exp
  {- HasNoCafRefs, Strictness: m7,
     Unfolding: (Declare.Log Declare.e38) -}
25135c60f7d13e7dfccd289687895879
  e38 :: Declare.Exp
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Declare.Add Declare.e41 Declare.e39) -}
826b65f1218984c8f8fd5271f71ae18d
  e39 :: Declare.Exp
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Declare.Num Declare.e40) -}
e9ea71163e65cf5ba4745baf85c609a3
  e4 :: Declare.Exp
  {- HasNoCafRefs, Strictness: m6,
     Unfolding: (Declare.Sqrt Declare.e37) -}
8542ff057b277ad9f29b94715c0e66df
  e40 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 2.3) -}
b626ce0b42e7ae78d01ff199664d5914
  e41 :: Declare.Exp
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Declare.Num Declare.e42) -}
ada0a7eec63b3296c1e9d4731de754eb
  e42 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 4.3) -}
58ebeb74d02166d4622012ba5276b8a2
  e7 :: Declare.Exp
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Declare.Num Declare.e8) -}
0dcc3a638461f37b1ab5bc0a4f4dd81c
  e8 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 4.5) -}
9ad9bc2ccfe78017e7d1601ac07b2b07
  e9 :: Declare.Exp
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Declare.Num Declare.e10) -}
14dff50cf252e55f8b3837e78165cde0
  showExpr :: Declare.Exp -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
instance GHC.Show.Show [Declare.Exp] = Declare.$fShowExp
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

